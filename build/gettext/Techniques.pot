# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Half Scheidl
# This file is distributed under the same license as the Dear Gen package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dear Gen \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-15 22:39+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/Techniques.rst:2
msgid "Techniques"
msgstr ""

#: ../../docs/Techniques.rst:5
msgid "Using a palette of colors"
msgstr ""

#: ../../docs/Techniques.rst:7
msgid "In several drawings of the Dear Gen project I used a predefined palette of colors, instead of generating the colors with code. I use services such as `coolors.co <https://coolors.co/>`_ to generate and tweak color palettes, and when I am satisfied with the colors, I simply copy and paste the hexadecimal values to an array in my sketch code. I can then pick a color from the palette using :code:`palette[index]` and use it to set fill color or stroke color."
msgstr ""

#: ../../docs/Techniques.rst:26
msgid "Remember that in Processing colors are simple integer numbers. Numbers can also be written in hexadecimal, as above."
msgstr ""

#: ../../docs/Techniques.rst:28
msgid "If you are interested in a more comprehensive discussion on colors in generative drawing, I highly recommend the article `Working with color in generative art <http://www.tylerlhobbs.com/writings/generative-colors>`_, by the digital artist Tyler Hobbs."
msgstr ""

#: ../../docs/Techniques.rst:32
msgid "Creating high-resolution images"
msgstr ""

#: ../../docs/Techniques.rst:33
msgid "To create high-resolution image exports, you can draw to a ``PGraphics`` object, which in most sketches of this project is named ``buffer``. The basic process is as follows:"
msgstr ""

#: ../../docs/Techniques.rst:37
msgid "Declare a PGraphics object as a global variable on the top of the sketch code:"
msgstr ""

#: ../../docs/Techniques.rst:37
msgid "``PGraphics buffer;``"
msgstr ""

#: ../../docs/Techniques.rst:40
msgid "In :code:`setup()`, you must use the method `createGraphics()` to instantiate the object."
msgstr ""

#: ../../docs/Techniques.rst:40
msgid "``buffer = createGraphics(3000, 2000);``"
msgstr ""

#: ../../docs/Techniques.rst:42
msgid "In ``setup()`` and ``draw()``, do all drawing operations on the ``buffer`` object."
msgstr ""

#: ../../docs/Techniques.rst:44
msgid "Finally, at the end of the ``draw()`` method, show the contents of the buffer with ``image(buffer,0,0,width,height)``. This approach scales down the contents of the buffer to the size of your sketch (``width`` and ``height``)."
msgstr ""

#: ../../docs/Techniques.rst:51
msgid "Saving the file"
msgstr ""

#: ../../docs/Techniques.rst:52
msgid "In most sketches the code to export the image is inside the :code:`keyPressed()` method, as below. In line 2, I used the key :kbd:`S` to save the sketch by checking the variable :code:`key`, which is available in Processing as a global variable. The with :code:`String.format` I create the file name, usually adding the time to the file name, so that all files are saved - if you use only \"filename.jpg\", then the exported image is replaced every time you press :kbd:`S`."
msgstr ""

